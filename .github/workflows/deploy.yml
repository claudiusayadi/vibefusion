name: Build and Deploy Vibefusion to GHCR

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ghcr.io/${{github.repository}}-api:latest

  build-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push App Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ghcr.io/${{github.repository}}-app:latest

  deploy:
    needs: [build-api, build-app]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read compose.yml content
        id: read-compose
        run: |
          echo "compose-file-content<<EOF" >> $GITHUB_OUTPUT
          cat compose.yml >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          script: |
            cd /home/dovely/apps
            REPO_NAME=$(basename ${{ github.repository }})
            mkdir -p "$REPO_NAME"
            cd "$REPO_NAME"
            cat > compose.yml << 'EOF'
            ${{ steps.read-compose.outputs.compose-file-content }}
            EOF
            export REPO_NAME="$REPO_NAME"
            docker compose pull
            docker compose up -d --build --remove-orphans
            docker image prune -f
